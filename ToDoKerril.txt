1. Просмотреть обучающий плейлист.
2. Продумать, что реализовать в первую очередь.
3. Вспомнить, как работают массив строк.

Итак.
1. Создается окно с кнопокой "Начать игру".
2. Выдается сообщением с "Загадайте животное!"
3. Выводится новое окно с двумя кнопками - "Да", "Нет". В верху текстовое окно с вопросами.
4. При нажатии на "Нет" или на "Да" - вопрос меняется.
5. После 10 вопросов выводится вопросительное окно с предполагаемым животным.
6. Если да, то "Ура, вы выиграли! Не хотите еще раз?"
7. Если да, то загадайте животное.
8. Если нет, то окно закрывается.
9. Если нет, то задается еще 10 вопросов.
10. Еще раз вопросительное окно с такими же вопросами.
11. Если нет, то предлагается ввести имя животного, чтобы внести его в базу данных.
12. Потом либо начать игру заново, либо закрыть окно.

1. Обновить тз с # и ссылкой на гитхаб. +
2. Создать метод nextQuestion();
	а. Решить вопрос с выходом за границы. +
	б. Решить вопрос с последним вопросом. +
        в. Проверить, точно ли все вопросы являются неповторяющимися. +
3. Досмотреть плейлист про Qt - разобраться с сигналами и слотами. + Нужно тогда, когда много кнопок и вызывают примерно одно и то же.
4. Решить, как создавать окна. + Не буду закрывать старые.
5. Решить вопрос, как переходить по окнам. От закрытия старых. +
6. Сделать прототип перехода по окнам. А именно шесть окон. +
7. Как закончить программу в Qt???
8. Я хочу ответить на последний вопрос и убрать первое "Добро пожаловать". +++
9. Сделать кнопки "Выиграл" и "Еще раз" в Winning.
10. Сделать обработку последнего "No" в предположении. А именно вызвать проверку животного. +


Итак, новый этап требует новых задач.
1. Решить, как послать в реакцию на кнопку ссылку на вопрос, чтобы анализировать проигрышь или выигрышь.

Следующая стадия.
1. Реализовать Winning; - добавить в массив совпадение.
2. Реализовать CheckAnimals; - проверить наличие животного в базе данных от нажатой кнопки.
3. Подумать, когда удалять quest;

На будущее - переработать алгоритм расчета, учитывая частоту. Создать класс Result.
